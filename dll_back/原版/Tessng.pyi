# This Python file uses the following encoding: utf-8
#############################################################################
##
## Copyright (C) 2020 The Qt Company Ltd.
## Contact: https://www.qt.io/licensing/
##
## This file is part of Qt for Python.
##
## $QT_BEGIN_LICENSE:LGPL$
## Commercial License Usage
## Licensees holding valid commercial Qt licenses may use this file in
## accordance with the commercial license agreement provided with the
## Software or, alternatively, in accordance with the terms contained in
## a written agreement between you and The Qt Company. For licensing terms
## and conditions see https://www.qt.io/terms-conditions. For further
## information use the contact form at https://www.qt.io/contact-us.
##
## GNU Lesser General Public License Usage
## Alternatively, this file may be used under the terms of the GNU Lesser
## General Public License version 3 as published by the Free Software
## Foundation and appearing in the file LICENSE.LGPL3 included in the
## packaging of this file. Please review the following information to
## ensure the GNU Lesser General Public License version 3 requirements
## will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
##
## GNU General Public License Usage
## Alternatively, this file may be used under the terms of the GNU
## General Public License version 2.0 or (at your option) the GNU General
## Public license version 3 or any later version approved by the KDE Free
## Qt Foundation. The licenses are as published by the Free Software
## Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
## included in the packaging of this file. Please review the following
## information to ensure the GNU General Public License requirements will
## be met: https://www.gnu.org/licenses/gpl-2.0.html and
## https://www.gnu.org/licenses/gpl-3.0.html.
##
## $QT_END_LICENSE$
##
#############################################################################

"""
This file contains the exact signatures for all functions in module
PySide2.Tessng, except for defaults which are replaced by "...".
"""

# Module PySide2.Tessng
import PySide2
try:
    import typing
except ImportError:
    from PySide2.support.signature import typing
from PySide2.support.signature.mapping import (
    Virtual, Missing, Invalid, Default, Instance)

class Object(object): pass

import shiboken2 as Shiboken
Shiboken.Object = Object

import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtWidgets
import PySide2.Tessng


class CustomerGui(Shiboken.Object):

    def __init__(self) -> None: ...

    def actions(self) -> typing.List: ...
    def menus(self) -> typing.List: ...
    def toolBars(self) -> typing.List: ...


class CustomerNet(Shiboken.Object):

    def __init__(self) -> None: ...

    def afterLoadNet(self) -> None: ...
    def afterViewKeyReleaseEvent(self, event:PySide2.QtGui.QKeyEvent) -> None: ...
    def afterViewMouseDoubleClickEvent(self, event:PySide2.QtGui.QMouseEvent) -> None: ...
    def afterViewMouseMoveEvent(self, event:PySide2.QtGui.QMouseEvent) -> None: ...
    def afterViewMousePressEvent(self, event:PySide2.QtGui.QMouseEvent) -> None: ...
    def afterViewMouseReleaseEvent(self, event:PySide2.QtGui.QMouseEvent) -> None: ...
    def afterViewResizeEvent(self, event:PySide2.QtGui.QResizeEvent) -> None: ...
    def afterViewScrollContentsBy(self, dx:int, dy:int) -> None: ...
    def afterViewWheelEvent(self, event:PySide2.QtGui.QWheelEvent) -> None: ...
    def beforeLoadNet(self) -> None: ...
    def connectorAreaBrushAndPen(self, connAreaId:int, brush:PySide2.QtGui.QBrush, pen:PySide2.QtGui.QPen) -> bool: ...
    def curvaturePrecision(self, itemType:int, itemId:int, extend1:float, extend2:float, precision:float) -> bool: ...
    def customerTableDDL(self) -> typing.Dict: ...
    def deleteCustomerData(self) -> None: ...
    def insertCustomerData(self) -> None: ...
    def isDrawLaneCenterLine(self, laneId:int) -> bool: ...
    def isDrawLinkCenterLine(self, linkId:int) -> bool: ...
    def isDrawLinkCorner(self, linkId:int) -> bool: ...
    def labelNameAndFont(self, itemType:int, itemId:int, outPropName:int, outFontSize:float) -> None: ...
    def laneBrushAndPen(self, laneId:int, brush:PySide2.QtGui.QBrush, pen:PySide2.QtGui.QPen) -> bool: ...
    def laneType(self, lType:typing.Sequence) -> bool: ...
    def linkBrushAndPen(self, linkId:int, brush:PySide2.QtGui.QBrush, pen:PySide2.QtGui.QPen) -> bool: ...
    def linkBuildGLanes(self, pILink:Tessng.ILink) -> bool: ...
    def linkType(self, lType:typing.Sequence) -> bool: ...
    def netFileSuffix(self, suffix:str) -> bool: ...
    def paint(self, itemType:int, itemId:int, painter:PySide2.QtGui.QPainter) -> bool: ...


class CustomerSimulator(Shiboken.Object):

    def __init__(self) -> None: ...

    def afterCalcTracingType(self, pIVehicle:Tessng.IVehicle) -> None: ...
    def afterNextPoint(self, pIVehicle:Tessng.IVehicle) -> None: ...
    def afterOneStep(self) -> None: ...
    def afterStart(self) -> None: ...
    def afterStop(self) -> None: ...
    def afterStopVehicle(self, pIVehicle:Tessng.IVehicle) -> None: ...
    def beforeMergingToLane(self, pIVehicle:Tessng.IVehicle, keepOn:bool) -> None: ...
    def beforeNextPoint(self, pIVehicle:Tessng.IVehicle, keepOn:bool) -> None: ...
    def beforeNextRoad(self, pIVehicle:Tessng.IVehicle, pRoad:PySide2.QtWidgets.QGraphicsItem, keepOn:bool) -> None: ...
    def beforeStart(self, keepOn:bool) -> None: ...
    def beforeStopVehicle(self, pIVehicle:Tessng.IVehicle) -> None: ...
    def boundingRect(self, pIVehicle:Tessng.IVehicle, outRect:PySide2.QtCore.QRectF) -> bool: ...
    def calcAcce(self, pIVehicle:Tessng.IVehicle, acce:float) -> bool: ...
    def calcChangeLaneSafeDist(self, pIVehicle:Tessng.IVehicle, dist:float) -> float: ...
    def calcDistToEventObj(self, pIVehicle:Tessng.IVehicle, dist:float) -> bool: ...
    def calcDynaDispatchParameters(self, simuTime:int, lDispatchInterval:typing.Sequence) -> bool: ...
    def calcDynaFlowRatioParameters(self, simuTime:int, lDecipointFLowRatioByInterval:typing.Sequence) -> bool: ...
    def calcDynaSignalContralParameters(self, simuTime:int, lSignalContral:typing.Sequence) -> bool: ...
    def calcLampColor(self, pSignalLamp:Tessng.ISignalLamp) -> bool: ...
    def calcLimitedLaneNumber(self, pIVehicle:Tessng.IVehicle, lLaneNumber:typing.Sequence) -> bool: ...
    def calcMaxLimitedSpeed(self, pIVehicle:Tessng.IVehicle, inOutLimitedSpeed:float) -> bool: ...
    def calcSpeedLimitByLane(self, pILink:Tessng.ILink, laneNumber:int, outSpeed:float) -> bool: ...
    def calcVehicleEuler(self, pIVehicle:Tessng.IVehicle, bPosiDire:bool=...) -> PySide2.QtGui.QVector3D: ...
    def candidateLaneConnectors(self, pIVehicle:Tessng.IVehicle, lLaneConnector:typing.Sequence) -> bool: ...
    def duringOneStep(self) -> None: ...
    def exportVehiTrace(self, dirPath:str) -> None: ...
    def initVehicle(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def isCalcDistToReduceArea(self) -> bool: ...
    def isCalcVehicleVector3D(self) -> bool: ...
    def isExportCollecterInfo(self) -> bool: ...
    def isStopDriving(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def leaveOffChangingTrace(self, pIVehicle:Tessng.IVehicle, differ:float, s:float) -> bool: ...
    def nextPoint(self, pIVehicle:Tessng.IVehicle, bResult:bool) -> bool: ...
    def paintVehicle(self, pIVehicle:Tessng.IVehicle, painter:PySide2.QtGui.QPainter) -> bool: ...
    def paintVehicleWithRotation(self, pIVehicle:Tessng.IVehicle, painter:PySide2.QtGui.QPainter, inOutRotation:float) -> bool: ...
    def reCalcAngle(self, pIVehicle:Tessng.IVehicle, outAngle:float) -> bool: ...
    def reCalcDismissChangeLane(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def reCalcToLeftFreely(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def reCalcToLeftLane(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def reCalcToRightFreely(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def reCalcToRightLane(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def reCalcdesirSpeed(self, pIVehicle:Tessng.IVehicle, inOutDesirSpeed:float) -> bool: ...
    def rePaintVehicle(self, pIVehicle:Tessng.IVehicle, painter:PySide2.QtGui.QPainter) -> None: ...
    def reSetAcce(self, pIVehicle:Tessng.IVehicle, inOutAcce:float) -> bool: ...
    def reSetDistanceFront(self, pIVehicle:Tessng.IVehicle, distance:float, s0:float) -> bool: ...
    def reSetFollowingParam(self, pIVehicle:Tessng.IVehicle, inOutSafeInterval:float, inOutSafeDistance:float) -> bool: ...
    def reSetFollowingParams(self, lFollowingParam:typing.Sequence) -> bool: ...
    def reSetFollowingType(self, pIVehicle:Tessng.IVehicle, outTypeValue:int) -> bool: ...
    def reSetSimuResultDir(self, inOutResultDir:str) -> bool: ...
    def reSetSpeed(self, pIVehicle:Tessng.IVehicle, inOutSpeed:float) -> bool: ...
    def reSetVehicleFront(self, pIVehicle:Tessng.IVehicle, pVehiFront:Tessng.IVehicle) -> bool: ...
    def recentTimeOfSpeedAndPos(self, timeInterval:int) -> bool: ...
    def shape(self, pIVehicle:Tessng.IVehicle, outShape:PySide2.QtGui.QPainterPath) -> bool: ...
    def startModeAfterStop(self) -> bool: ...
    def travelOnChangingTrace(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def vehiRunInfo(self, pIVehicle:Tessng.IVehicle) -> str: ...
    def writeSimuResult(self, dataDir:str) -> None: ...


class GraphicsItemPropName(object):
    Id: Tessng.GraphicsItemPropName # value = Tessng.GraphicsItemPropName.Id
    Name: Tessng.GraphicsItemPropName # value = Tessng.GraphicsItemPropName.Name
    None_: Tessng.GraphicsItemPropName # value = Tessng.GraphicsItemPropName.None_
    name: getset_descriptor # value = <attribute 'name' of 'Tessng.GraphicsItemPropName' objects>
    values: dict # value = {'None_': Tessng.GraphicsItemPropName.None_, 'Id': Tessng.GraphicsItemPropName.Id, 'Name': Tessng.GraphicsItemPropName.Name}


class GuiInterface(Shiboken.Object):

    def __init__(self) -> None: ...

    def aboutMenu(self) -> PySide2.QtWidgets.QMenu: ...
    def actionBusLine(self) -> PySide2.QtWidgets.QAction: ...
    def actionBusStation(self) -> PySide2.QtWidgets.QAction: ...
    def actionCalcDistance(self) -> PySide2.QtWidgets.QAction: ...
    def actionChangeLaneParam(self) -> PySide2.QtWidgets.QAction: ...
    def actionClose(self) -> PySide2.QtWidgets.QAction: ...
    def actionCloseAll(self) -> PySide2.QtWidgets.QAction: ...
    def actionDispConfig(self) -> PySide2.QtWidgets.QAction: ...
    def actionDrivInfoCollecter(self) -> PySide2.QtWidgets.QAction: ...
    def actionEvalPubtrans(self) -> PySide2.QtWidgets.QAction: ...
    def actionExit(self) -> PySide2.QtWidgets.QAction: ...
    def actionNewFile(self) -> PySide2.QtWidgets.QAction: ...
    def actionNullGMapTool(self) -> PySide2.QtWidgets.QAction: ...
    def actionOpenFile(self) -> PySide2.QtWidgets.QAction: ...
    def actionPan(self) -> PySide2.QtWidgets.QAction: ...
    def actionPause(self) -> PySide2.QtWidgets.QAction: ...
    def actionPluginManager(self) -> PySide2.QtWidgets.QAction: ...
    def actionQueueCounter(self) -> PySide2.QtWidgets.QAction: ...
    def actionRun(self) -> PySide2.QtWidgets.QAction: ...
    def actionSave(self) -> PySide2.QtWidgets.QAction: ...
    def actionSaveOther(self) -> PySide2.QtWidgets.QAction: ...
    def actionSelectAllGBusLine(self) -> PySide2.QtWidgets.QAction: ...
    def actionSelectAllGBusStation(self) -> PySide2.QtWidgets.QAction: ...
    def actionSelectAllGConnector(self) -> PySide2.QtWidgets.QAction: ...
    def actionSelectAllGDeciPoint(self) -> PySide2.QtWidgets.QAction: ...
    def actionSelectAllGLink(self) -> PySide2.QtWidgets.QAction: ...
    def actionSelectRectangle(self) -> PySide2.QtWidgets.QAction: ...
    def actionSignalGroup(self) -> PySide2.QtWidgets.QAction: ...
    def actionSignalLamp(self) -> PySide2.QtWidgets.QAction: ...
    def actionSimuConfig(self) -> PySide2.QtWidgets.QAction: ...
    def actionStop(self) -> PySide2.QtWidgets.QAction: ...
    def actionTracingParam(self) -> PySide2.QtWidgets.QAction: ...
    def actionTravelDetector(self) -> PySide2.QtWidgets.QAction: ...
    def actionTriggered(self) -> PySide2.QtWidgets.QAction: ...
    def actionVehicleComposition(self) -> PySide2.QtWidgets.QAction: ...
    def actionVehicleType(self) -> PySide2.QtWidgets.QAction: ...
    def actionZoomFullExtent(self) -> PySide2.QtWidgets.QAction: ...
    def actionZoomIn(self) -> PySide2.QtWidgets.QAction: ...
    def actionZoomOut(self) -> PySide2.QtWidgets.QAction: ...
    def addDockWidgetToMainWindow(self, area:PySide2.QtCore.Qt.DockWidgetArea, dockwidget:PySide2.QtWidgets.QDockWidget) -> None: ...
    def addToolBar(self, name:str) -> PySide2.QtWidgets.QToolBar: ...
    def addWidgetToToolBar(self, pWidget:PySide2.QtWidgets.QWidget) -> PySide2.QtWidgets.QAction: ...
    def certificatePlugin(self, pluginName:str) -> bool: ...
    @typing.overload
    def checkToolButtons(self, checked:bool) -> None: ...
    @typing.overload
    def checkToolButtons(self, checked:bool, pException:PySide2.QtWidgets.QAction) -> None: ...
    def drawGrid(self) -> None: ...
    def editorMenu(self) -> PySide2.QtWidgets.QMenu: ...
    def fileMenu(self) -> PySide2.QtWidgets.QMenu: ...
    def fileToolBar(self) -> PySide2.QtWidgets.QToolBar: ...
    def loadPlugins(self) -> None: ...
    def mainWindow(self) -> PySide2.QtWidgets.QMainWindow: ...
    def menuBar(self) -> PySide2.QtWidgets.QMenuBar: ...
    def netMenu(self) -> PySide2.QtWidgets.QMenu: ...
    def netToolBar(self) -> PySide2.QtWidgets.QToolBar: ...
    def operToolBar(self) -> PySide2.QtWidgets.QToolBar: ...
    def releasePlugins(self) -> None: ...
    def removeDockWidgetFromMainWindow(self, dockwidget:PySide2.QtWidgets.QDockWidget) -> None: ...
    def setActionTriggered(self, pAction:PySide2.QtWidgets.QAction) -> None: ...
    def simuMenu(self) -> PySide2.QtWidgets.QMenu: ...
    def simuToolBar(self) -> PySide2.QtWidgets.QToolBar: ...
    def statusBar(self) -> PySide2.QtWidgets.QStatusBar: ...
    def systemToolBar(self) -> PySide2.QtWidgets.QToolBar: ...
    def viewMenu(self) -> PySide2.QtWidgets.QMenu: ...
    def winHeight(self) -> float: ...
    def winWidth(self) -> float: ...
    def winX(self) -> float: ...
    def winY(self) -> float: ...


class IBusLine(Shiboken.Object):

    def __init__(self) -> None: ...

    def id(self) -> int: ...
    def length(self) -> float: ...
    def name(self) -> str: ...


class IConnector(Shiboken.Object):

    def __init__(self) -> None: ...

    def fromLink(self) -> Tessng.ILink: ...
    def id(self) -> int: ...
    def laneConnectors(self) -> typing.List: ...
    def limitSpeed(self) -> float: ...
    def minSpeed(self) -> float: ...
    def toLink(self) -> Tessng.ILink: ...


class IConnectorArea(Shiboken.Object):

    def __init__(self) -> None: ...

    def allConnector(self) -> typing.List: ...
    def id(self) -> int: ...


class IDecisionPoint(Shiboken.Object):

    def __init__(self) -> None: ...

    def id(self) -> int: ...
    def link(self) -> Tessng.ILink: ...
    def name(self) -> str: ...
    def setDynaModified(self, bModified:bool) -> None: ...


class IDispatchPoint(Shiboken.Object):

    def __init__(self) -> None: ...

    def addDispatchInterval(self, vehiCompId:int, interval:int, vehiCount:int) -> int: ...
    def id(self) -> int: ...
    def link(self) -> Tessng.ILink: ...
    def name(self) -> str: ...
    def setDynaModified(self, bModified:bool) -> None: ...


class ILane(Shiboken.Object):

    def __init__(self) -> None: ...

    def actionType(self) -> str: ...
    def centerBreakPoints(self) -> typing.List: ...
    def id(self) -> int: ...
    def length(self) -> float: ...
    def link(self) -> Tessng.ILink: ...
    def number(self) -> int: ...


class ILaneConnector(Shiboken.Object):

    def __init__(self) -> None: ...

    def centerBreakPoints(self) -> typing.List: ...
    def fromLane(self) -> Tessng.ILane: ...
    def length(self) -> float: ...
    def toLane(self) -> Tessng.ILane: ...


class ILink(Shiboken.Object):

    def __init__(self) -> None: ...

    def centerBreakPoints(self) -> typing.List: ...
    def id(self) -> int: ...
    def laneCount(self) -> int: ...
    def lanes(self) -> typing.List: ...
    def length(self) -> float: ...
    def limitSpeed(self) -> float: ...
    def minSpeed(self) -> float: ...
    def name(self) -> str: ...
    def setLimitSpeed(self, speed:float) -> None: ...
    def width(self) -> float: ...


class ISignalLamp(Shiboken.Object):

    def __init__(self) -> None: ...

    def id(self) -> int: ...
    def phaseId(self) -> int: ...
    @typing.overload
    def setLampColor(self, color:PySide2.QtGui.QColor) -> None: ...
    @typing.overload
    def setLampColor(self, colorStr:str) -> None: ...
    def signalGroupId(self) -> int: ...


class IVehicle(Shiboken.Object):

    def __init__(self) -> None: ...

    def acce(self) -> float: ...
    def angle(self) -> float: ...
    def boundingPolygon(self) -> PySide2.QtGui.QPolygonF: ...
    def currBatchNumber(self) -> int: ...
    def currSpeed(self) -> float: ...
    def driving(self) -> None: ...
    def dynaInfo(self) -> int: ...
    def id(self) -> int: ...
    def initLane(self, laneNumber:int, dist:float=..., speed:float=...) -> None: ...
    def initLaneConnector(self, laneNumber:int, toLaneNumber:int, dist:float=..., speed:float=...) -> None: ...
    def initSpeed(self, speed:float=...) -> float: ...
    def isStarted(self) -> bool: ...
    def lLaneObjectVertex(self) -> typing.List: ...
    def lane(self) -> Tessng.ILane: ...
    def laneId(self) -> int: ...
    def length(self) -> float: ...
    def limitMaxSpeed(self) -> float: ...
    def limitMinSpeed(self) -> float: ...
    def name(self) -> str: ...
    def picture(self) -> PySide2.QtGui.QPicture: ...
    def pos(self) -> PySide2.QtCore.QPointF: ...
    def road(self) -> int: ...
    def roadId(self) -> int: ...
    def roadIsLink(self) -> bool: ...
    def roadName(self) -> str: ...
    def roadType(self) -> int: ...
    def setDynaInfo(self, pDynaInfo:int) -> None: ...
    def setLength(self, len:float, bRestWidth:bool=...) -> None: ...
    def setTag(self, tag:int) -> None: ...
    def setVehiType(self, code:int) -> None: ...
    def startLink(self) -> Tessng.ILink: ...
    def startSimuTime(self) -> int: ...
    def tag(self) -> int: ...
    def toLane(self) -> Tessng.ILane: ...
    def toLaneId(self) -> int: ...
    def useCache(self, bCache:bool) -> None: ...
    def vehiDistFront(self) -> float: ...
    def vehiDistLLaneFront(self) -> float: ...
    def vehiDistLLaneRear(self) -> float: ...
    def vehiDistRLaneFront(self) -> float: ...
    def vehiDistRLaneRear(self) -> float: ...
    def vehiDistRear(self) -> float: ...
    def vehiHeadwayFront(self) -> float: ...
    def vehiHeadwaytoRear(self) -> float: ...
    def vehiSpeedFront(self) -> float: ...
    def vehiSpeedLLaneFront(self) -> float: ...
    def vehiSpeedLLaneRear(self) -> float: ...
    def vehiSpeedRLaneFront(self) -> float: ...
    def vehiSpeedRLaneRear(self) -> float: ...
    def vehiSpeedRear(self) -> float: ...
    def vehicleDriving(self) -> Tessng.IVehicleDriving: ...
    def vehicleFront(self) -> Tessng.IVehicle: ...
    def vehicleLFront(self) -> Tessng.IVehicle: ...
    def vehicleLRear(self) -> Tessng.IVehicle: ...
    def vehicleRFront(self) -> Tessng.IVehicle: ...
    def vehicleRRear(self) -> Tessng.IVehicle: ...
    def vehicleRear(self) -> Tessng.IVehicle: ...
    def vehicleTypeCode(self) -> int: ...
    def vehicleTypeName(self) -> str: ...
    def zValue(self) -> float: ...


class IVehicleDriving(Shiboken.Object):

    def __init__(self) -> None: ...

    def angle(self) -> float: ...
    def calcTraceLength(self) -> None: ...
    def changingTrace(self) -> typing.List: ...
    def changingTraceLength(self) -> float: ...
    def currDistance(self) -> float: ...
    def currDistanceInRoad(self) -> float: ...
    def currDistanceInSegment(self) -> float: ...
    def desirSpeed(self) -> float: ...
    def differToTargetLaneNumber(self) -> int: ...
    def distToEndpoint(self, fromVehiHead:bool=...) -> float: ...
    def followingType(self) -> int: ...
    def getCurrRoad(self) -> PySide2.QtWidgets.QGraphicsItem: ...
    def getNextRoad(self) -> PySide2.QtWidgets.QGraphicsItem: ...
    def getRandomNumber(self) -> int: ...
    def getVehiDrivDistance(self) -> float: ...
    def getVehicleNegotiated(self) -> Tessng.IVehicle: ...
    def initTrace(self) -> None: ...
    def isHavingDeciPointOnLink(self) -> bool: ...
    def isOnRouting(self) -> bool: ...
    def laneNumber(self) -> int: ...
    def nextPoint(self) -> bool: ...
    def setAngle(self, angle:float) -> None: ...
    def setChangingTracingType(self, b:bool) -> None: ...
    def setCurrDistanceInRoad(self, dist:float) -> None: ...
    def setCurrDistanceInSegment(self, dist:float) -> None: ...
    def setCurrDistanceInTrace(self, dist:float) -> None: ...
    def setFollowingType(self, followingType:int, interval:int=..., pIVehicleNegotiated:Tessng.IVehicle=...) -> None: ...
    def setIndexOfSegmInTrace(self, index:int) -> None: ...
    def setLaneNumber(self, number:int) -> None: ...
    def setRouting(self, pRouting:int) -> None: ...
    def setSegmentIndex(self, index:int) -> None: ...
    def setSpeed(self, speed:float) -> None: ...
    def setTrace(self, lPoint:typing.Sequence) -> None: ...
    def setTracingType(self, type:int) -> None: ...
    def setVehiDrivDistance(self, dist:float) -> None: ...
    def setX(self, posX:float) -> None: ...
    def setY(self, posY:float) -> None: ...
    def stopVehicle(self) -> None: ...
    def toLeftLane(self) -> None: ...
    def toRightLane(self) -> None: ...
    def tracingType(self) -> int: ...
    def vehicle(self) -> Tessng.IVehicle: ...
    def zeroSpeedInterval(self) -> int: ...


class IVehicleDrivingManagerTask(Shiboken.Object):

    def __init__(self) -> None: ...

    def acceMultiplesReally(self) -> float: ...
    def batchIntervalReally(self) -> float: ...
    def currBatchNumber(self) -> int: ...
    def finished(self) -> bool: ...
    def isStoppeed(self) -> bool: ...
    def running(self) -> bool: ...
    def setStopped(self, stopped:bool) -> None: ...
    def timeOnBatchNumber(self, batchNumber:int) -> int: ...


class IVehicleDrivingTask(Shiboken.Object):

    def __init__(self) -> None: ...

    def currBatchNumber(self) -> int: ...
    def finished(self) -> bool: ...
    def id(self) -> int: ...
    def outTime(self) -> bool: ...
    def running(self) -> bool: ...
    def semaphoreAvailable(self) -> int: ...
    def setStopped(self, stopped:bool) -> None: ...
    def startTask(self, currBatchNumber:int=...) -> None: ...


class IVehicleSupervisor(Shiboken.Object):

    def __init__(self) -> None: ...

    def distanceTwoVehicle(self, pV1:Tessng.IVehicle, pV2:Tessng.IVehicle) -> float: ...
    def vehisInConnector(self, connectorId:int) -> typing.List: ...
    def vehisInLane(self, laneId:int) -> typing.List: ...
    def vehisInLaneConnector(self, connectorId:int, fromLaneId:int, toLaneId:int) -> typing.List: ...
    def vehisInLink(self, linkId:int) -> typing.List: ...


class NetInterface(Shiboken.Object):

    def __init__(self) -> None: ...

    def allConnectorArea(self) -> typing.List: ...
    def angleToItem(self, angle:float) -> float: ...
    def backgroundMap(self) -> PySide2.QtCore.QByteArray: ...
    def buslines(self) -> typing.List: ...
    def connectorCount(self) -> int: ...
    def connectorIds(self) -> typing.List: ...
    def connectors(self) -> typing.List: ...
    def createConnector(self, fromLinkId:int, toLinkId:int, lFromLaneNumber:typing.Sequence, lToLaneNumber:typing.Sequence, connName:str, bAddToScene:bool=...) -> Tessng.IConnector: ...
    def createConnectorWithPoints(self, fromLinkId:int, toLinkId:int, lFromLaneNumber:typing.Sequence, lToLaneNumber:typing.Sequence, laneConnectorPoints:typing.Sequence, connName:str='', bAddToScene:bool=True) -> Tessng.IConnector: ...
	def createDispatchPoint(self, pLink:Tessng.ILink, dpName:str=..., bAddToScene:bool=...) -> Tessng.IDispatchPoint: ...
    def createLink(self, lCenterPoint:typing.Sequence, lLaneWidth:typing.Sequence, linkName:str=..., bAddToScene:bool=...) -> Tessng.ILink: ...
    def createLinkWithLanePoints(self, lCenterLinePoint:typing.Sequence, lanesWithPoints:typing.Sequence, linkName:str=..., bAddToScene:bool=...) -> Tessng.ILink: ...
    def createVehicleComposition(self, name:str, lVehiComp:typing.Sequence) -> int: ...
    def decisionPoints(self) -> typing.List: ...
    def dispatchPoints(self) -> typing.List: ...
    def findBusline(self, buslineId:int) -> Tessng.IBusLine: ...
    def findBuslineByFirstLinkId(self, linkId:int) -> Tessng.IBusLine: ...
    def findConnector(self, id:int) -> Tessng.IConnector: ...
    def findDecisionPoint(self, id:int) -> Tessng.IDecisionPoint: ...
    def findDispatchPoint(self, id:int) -> Tessng.IDispatchPoint: ...
    def findLink(self, id:int) -> Tessng.ILink: ...
    def getIDByItemName(self, name:str) -> int: ...
    def graphicsScene(self) -> PySide2.QtWidgets.QGraphicsScene: ...
    def graphicsView(self) -> PySide2.QtWidgets.QGraphicsView: ...
    def judgeLinkToCross(self, linkId:int) -> bool: ...
    def laneCenterPoints(self, laneId:int) -> typing.List: ...
    def linkCenterPoints(self, linkId:int) -> typing.List: ...
    def linkCount(self) -> int: ...
    def linkIds(self) -> typing.List: ...
    def links(self) -> typing.List: ...
    def netFilePath(self) -> str: ...
    def openNetFle(self, filePath:str) -> None: ...
    def saveRoadNet(self) -> None: ...
    def sceneHeigth(self) -> float: ...
    def sceneScale(self) -> float: ...
    def sceneWidth(self) -> float: ...
	def setSceneSize(self, w:float, h:float) -> None: ...


class NetItemType(Shiboken.Object):
    GBusLineType = 65551
    GBusStationType = 65550
    GConnectorAreaType = 65553
    GConnectorType = 65540
    GDecisionType = 65542
    GDeparturePointType = 65543
    GGuideArrowType = 65552
    GLaneConnectorType = 65541
    GLaneType = 65539
    GLinkCenterType = 65554
    GLinkType = 65538
    GReduceSpeedAreaType = 65549
    GSignalLampType = 65545
    GVehicleDetectorType = 65555
    GVehicleDrivInfoCollecterType = 65546
    GVehicleQueueCounterType = 65547
    GVehicleTravelDetectorType = 65548
    GVehicleType = 65544
    GVertexType = 65537
    LaneConnectorType = 65638
    LaneType = 65637

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, NetItemType:Tessng.NetItemType) -> None: ...

    @staticmethod
    def __copy__() -> None: ...


class PyCustomerNet(Tessng.CustomerNet):

    def __init__(self) -> None: ...

    def afterLoadNet(self) -> None: ...
    def afterViewKeyReleaseEvent(self, event:PySide2.QtGui.QKeyEvent) -> None: ...
    def afterViewMouseDoubleClickEvent(self, event:PySide2.QtGui.QMouseEvent) -> None: ...
    def afterViewMouseMoveEvent(self, event:PySide2.QtGui.QMouseEvent) -> None: ...
    def afterViewMousePressEvent(self, event:PySide2.QtGui.QMouseEvent) -> None: ...
    def afterViewMouseReleaseEvent(self, event:PySide2.QtGui.QMouseEvent) -> None: ...
    def afterViewResizeEvent(self, event:PySide2.QtGui.QResizeEvent) -> None: ...
    def afterViewScrollContentsBy(self, dx:int, dy:int) -> None: ...
    def afterViewWheelEvent(self, event:PySide2.QtGui.QWheelEvent) -> None: ...
    def beforeLoadNet(self) -> None: ...
    def connectorAreaBrushAndPen(self, connAreaId:int, brush:PySide2.QtGui.QBrush, pen:PySide2.QtGui.QPen) -> bool: ...
    def customerTableDDL(self) -> typing.Dict: ...
    def deleteCustomerData(self) -> None: ...
    def insertCustomerData(self) -> None: ...
    def isDrawLaneCenterLine(self, laneId:int) -> bool: ...
    def isDrawLinkCenterLine(self, linkId:int) -> bool: ...
    def isDrawLinkCorner(self, linkId:int) -> bool: ...
    def laneBrushAndPen(self, laneId:int, brush:PySide2.QtGui.QBrush, pen:PySide2.QtGui.QPen) -> bool: ...
    def laneType(self, lType:typing.Sequence) -> bool: ...
    def linkBrushAndPen(self, linkId:int, brush:PySide2.QtGui.QBrush, pen:PySide2.QtGui.QPen) -> bool: ...
    def linkBuildGLanes(self, pILink:Tessng.ILink) -> bool: ...
    def linkType(self, lType:typing.Sequence) -> bool: ...
    def paint(self, itemType:int, itemId:int, painter:PySide2.QtGui.QPainter) -> bool: ...
    def ref_curvaturePrecision(self, itemType:int, itemId:int, ref_extend1:Tessng.objreal, ref_extend2:Tessng.objreal, ref_precision:Tessng.objreal) -> bool: ...
    def ref_labelNameAndFont(self, itemType:int, itemId:int, ref_outPropName:Tessng.objint, ref_outFontSize:Tessng.objreal) -> None: ...
    def ref_netFileSuffix(self, ref_suffix:Tessng.objstring) -> bool: ...


class PyCustomerSimulator(Tessng.CustomerSimulator):

    def __init__(self) -> None: ...

    def afterCalcTracingType(self, pIVehicle:Tessng.IVehicle) -> None: ...
    def afterNextPoint(self, pIVehicle:Tessng.IVehicle) -> None: ...
    def afterOneStep(self) -> None: ...
    def afterStart(self) -> None: ...
    def afterStop(self) -> None: ...
    def afterStopVehicle(self, pIVehicle:Tessng.IVehicle) -> None: ...
    def beforeStopVehicle(self, pIVehicle:Tessng.IVehicle) -> None: ...
    def boundingRect(self, pIVehicle:Tessng.IVehicle, outRect:PySide2.QtCore.QRectF) -> bool: ...
    def calcDynaDispatchParameters(self, simuTime:int, lDispatchInterval:typing.Sequence) -> bool: ...
    def calcDynaFlowRatioParameters(self, simuTime:int, lDecipointFLowRatioByInterval:typing.Sequence) -> bool: ...
    def calcDynaSignalContralParameters(self, simuTime:int, lSignalContral:typing.Sequence) -> bool: ...
    def calcLampColor(self, pSignalLamp:Tessng.ISignalLamp) -> bool: ...
    def calcLimitedLaneNumber(self, pIVehicle:Tessng.IVehicle, lLaneNumber:typing.Sequence) -> bool: ...
    def calcVehicleEuler(self, pIVehicle:Tessng.IVehicle, bPosiDire:bool=...) -> PySide2.QtGui.QVector3D: ...
    def duringOneStep(self) -> None: ...
    def exportVehiTrace(self, dirPath:str) -> None: ...
    def initVehicle(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def isCalcDistToReduceArea(self) -> bool: ...
    def isCalcVehicleVector3D(self) -> bool: ...
    def isExportCollecterInfo(self) -> bool: ...
    def isStopDriving(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def paintVehicle(self, pIVehicle:Tessng.IVehicle, painter:PySide2.QtGui.QPainter) -> bool: ...
    def reCalcDismissChangeLane(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def reCalcToLeftFreely(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def reCalcToLeftLane(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def reCalcToRightFreely(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def reCalcToRightLane(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def rePaintVehicle(self, pIVehicle:Tessng.IVehicle, painter:PySide2.QtGui.QPainter) -> None: ...
    def reSetFollowingParams(self, lFollowingParam:typing.Sequence) -> bool: ...
    def reSetVehicleFront(self, pIVehicle:Tessng.IVehicle, pVehiFront:Tessng.IVehicle) -> bool: ...
    def ref_beforeCalcLampColor(self, ref_keepOn:Tessng.objbool) -> bool: ...
    def ref_beforeMergingToLane(self, pIVehicle:Tessng.IVehicle, ref_keepOn:Tessng.objbool) -> None: ...
    def ref_beforeNextPoint(self, pIVehicle:Tessng.IVehicle, ref_keepOn:Tessng.objbool) -> None: ...
    def ref_beforeNextRoad(self, pIVehicle:Tessng.IVehicle, pRoad:PySide2.QtWidgets.QGraphicsItem, ref_keepOn:Tessng.objbool) -> None: ...
    def ref_beforeStart(self, ref_keepOn:Tessng.objbool) -> None: ...
    def ref_calcAcce(self, pIVehicle:Tessng.IVehicle, acce:Tessng.objreal) -> bool: ...
    def ref_calcChangeLaneSafeDist(self, pIVehicle:Tessng.IVehicle, ref_dist:Tessng.objreal) -> float: ...
    def ref_calcDistToEventObj(self, pIVehicle:Tessng.IVehicle, ref_dist:Tessng.objreal) -> bool: ...
    def ref_calcMaxLimitedSpeed(self, pIVehicle:Tessng.IVehicle, ref_inOutLimitedSpeed:Tessng.objreal) -> bool: ...
    def ref_calcSpeedLimitByLane(self, pILink:Tessng.ILink, laneNumber:int, ref_outSpeed:Tessng.objreal) -> bool: ...
    def ref_leaveOffChangingTrace(self, pIVehicle:Tessng.IVehicle, differ:float, ref_s:Tessng.objreal) -> bool: ...
    def ref_nextPoint(self, pIVehicle:Tessng.IVehicle, ref_bResult:Tessng.objbool) -> bool: ...
    def ref_paintVehicleWithRotation(self, pIVehicle:Tessng.IVehicle, painter:PySide2.QtGui.QPainter, ref_inOutRotation:Tessng.objreal) -> bool: ...
    def ref_reCalcAngle(self, pIVehicle:Tessng.IVehicle, ref_outAngle:Tessng.objreal) -> bool: ...
    def ref_reCalcdesirSpeed(self, pIVehicle:Tessng.IVehicle, ref_desirSpeed:Tessng.objreal) -> bool: ...
    def ref_reSetAcce(self, pIVehicle:Tessng.IVehicle, ref_inOutAcce:Tessng.objreal) -> bool: ...
    def ref_reSetDistanceFront(self, pIVehicle:Tessng.IVehicle, distance:Tessng.objreal, s0:Tessng.objreal) -> bool: ...
    def ref_reSetFollowingParam(self, pIVehicle:Tessng.IVehicle, ref_inOutSafeInterval:Tessng.objreal, ref_inOutSafeDistance:Tessng.objreal) -> bool: ...
    def ref_reSetFollowingType(self, pIVehicle:Tessng.IVehicle, ref_outTypeValue:Tessng.objint) -> bool: ...
    def ref_reSetSimuResultDir(self, inOutResultDir:Tessng.objstring) -> bool: ...
    def ref_reSetSpeed(self, pIVehicle:Tessng.IVehicle, ref_inOutSpeed:Tessng.objreal) -> bool: ...
    def ref_recentTimeOfSpeedAndPos(self, timeInterval:Tessng.objint) -> bool: ...
    def shape(self, pIVehicle:Tessng.IVehicle, outShape:PySide2.QtGui.QPainterPath) -> bool: ...
    def startModeAfterStop(self) -> bool: ...
    def travelOnChangingTrace(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def vehiRunInfo(self, pIVehicle:Tessng.IVehicle) -> str: ...
    def writeSimuResult(self, dataDir:str) -> None: ...


class PythonPanel(Shiboken.Object):

    def __init__(self) -> None: ...

    def create(self) -> None: ...


class SimuInterface(Shiboken.Object):

    def __init__(self) -> None: ...

    def acceMultiples(self) -> int: ...
    def acceMultiplesReally(self) -> float: ...
    def allVehiStarted(self) -> typing.List: ...
    def allVehicle(self) -> typing.List: ...
    def batchIntervalReally(self) -> float: ...
    def batchNumber(self) -> int: ...
    def byCpuTime(self) -> bool: ...
    def createGVehicle(self, dynaVehi:Tessng.TESSNG.DynaVehiParam) -> Tessng.IVehicle: ...
    def delayTimeOnBatchNumber(self, batchNumber:int) -> int: ...
    def getSignalPhasesColor(self, lOutSPhaseColor:typing.Sequence) -> None: ...
    def getVehiTrace(self, vehiId:int, lOutVp:typing.Sequence) -> None: ...
    def getVehicle(self, vehiId:int) -> Tessng.IVehicle: ...
    def getVehisInfoAggregated(self, simuTime:int, lOutVehiInfo:typing.Sequence) -> None: ...
    def getVehisInfoCollected(self, simuTime:int, lOutVehiInfo:typing.Sequence) -> None: ...
    def getVehisQueueAggregated(self, simuTime:int, lOutVehiQueueAggregated:typing.Sequence) -> None: ...
    def getVehisQueueCounted(self, simuTime:int, lOutVehiQueue:typing.Sequence) -> None: ...
    def getVehisStatus(self, lOutVs:typing.Sequence) -> None: ...
    def getVehisTravelAggregated(self, simuTime:int, lOutVehisTravelAggregated:typing.Sequence) -> None: ...
    def getVehisTravelDetected(self, simuTime:int, lOutVehiTravel:typing.Sequence) -> None: ...
    def isPausing(self) -> bool: ...
    def isRunning(self) -> bool: ...
    def pauseSimu(self) -> bool: ...
    def pauseSimuOrNot(self) -> None: ...
    def queueRecently(self, queueCounterId:int, queueLength:float, vehiCount:int) -> bool: ...
    def setByCpuTime(self, bByCpuTime:bool) -> bool: ...
    def setSimuAccuracy(self, accuracy:int) -> None: ...
    def simuAccuracy(self) -> int: ...
    def simuTimeIntervalWithAcceMutiples(self) -> int: ...
    def startMSecsSinceEpoch(self) -> int: ...
    def startSimu(self) -> bool: ...
    def stopSimu(self) -> bool: ...
    def stopVehicleDriving(self, pVehicle:Tessng.IVehicle) -> None: ...
    def timeOnBatchNumber(self, batchNumber:int) -> int: ...
    def vehiCountRunning(self) -> int: ...
    def vehiCountTotal(self) -> int: ...
    def vehicleDrivingManagerTask(self) -> Tessng.IVehicleDrivingManagerTask: ...
    def vehicleDrivingTasks(self) -> typing.List: ...
    def vehisInConnector(self, connectorId:int) -> typing.List: ...
    def vehisInLane(self, laneId:int) -> typing.List: ...
    def vehisInLaneConnector(self, connectorId:int, fromLaneId:int, toLaneId:int) -> typing.List: ...
    def vehisInLink(self, linkId:int) -> typing.List: ...


class TESSNG(Shiboken.Object):
    Motor: Tessng.TESSNG.MotorOrNonmotor # value = Tessng.TESSNG.MotorOrNonmotor.Motor
    Nonmotor: Tessng.TESSNG.MotorOrNonmotor # value = Tessng.TESSNG.MotorOrNonmotor.Nonmotor

    class DecipointFlowRatioByInterval(Shiboken.Object):
        deciPointID: getset_descriptor # value = <attribute 'deciPointID' of 'Tessng.TESSNG.DecipointFlowRatioByInterval' objects>
        endDateTime: getset_descriptor # value = <attribute 'endDateTime' of 'Tessng.TESSNG.DecipointFlowRatioByInterval' objects>
        mlRoutingFlowRatio: getset_descriptor # value = <attribute 'mlRoutingFlowRatio' of 'Tessng.TESSNG.DecipointFlowRatioByInterval' objects>
        startDateTime: getset_descriptor # value = <attribute 'startDateTime' of 'Tessng.TESSNG.DecipointFlowRatioByInterval' objects>

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, DecipointFlowRatioByInterval:Tessng.TESSNG.DecipointFlowRatioByInterval) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class DispatchInterval(Shiboken.Object):
        dispatchId: getset_descriptor # value = <attribute 'dispatchId' of 'Tessng.TESSNG.DispatchInterval' objects>
        fromTime: getset_descriptor # value = <attribute 'fromTime' of 'Tessng.TESSNG.DispatchInterval' objects>
        mlVehicleConsDetail: getset_descriptor # value = <attribute 'mlVehicleConsDetail' of 'Tessng.TESSNG.DispatchInterval' objects>
        toTime: getset_descriptor # value = <attribute 'toTime' of 'Tessng.TESSNG.DispatchInterval' objects>
        vehiCount: getset_descriptor # value = <attribute 'vehiCount' of 'Tessng.TESSNG.DispatchInterval' objects>

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, DispatchInterval:Tessng.TESSNG.DispatchInterval) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class DynaVehiParam(Shiboken.Object):
        color: getset_descriptor # value = <attribute 'color' of 'Tessng.TESSNG.DynaVehiParam' objects>
        dist: getset_descriptor # value = <attribute 'dist' of 'Tessng.TESSNG.DynaVehiParam' objects>
        laneNumber: getset_descriptor # value = <attribute 'laneNumber' of 'Tessng.TESSNG.DynaVehiParam' objects>
        name: getset_descriptor # value = <attribute 'name' of 'Tessng.TESSNG.DynaVehiParam' objects>
        others: getset_descriptor # value = <attribute 'others' of 'Tessng.TESSNG.DynaVehiParam' objects>
        roadId: getset_descriptor # value = <attribute 'roadId' of 'Tessng.TESSNG.DynaVehiParam' objects>
        speed: getset_descriptor # value = <attribute 'speed' of 'Tessng.TESSNG.DynaVehiParam' objects>
        toLaneNumber: getset_descriptor # value = <attribute 'toLaneNumber' of 'Tessng.TESSNG.DynaVehiParam' objects>
        vehiTypeCode: getset_descriptor # value = <attribute 'vehiTypeCode' of 'Tessng.TESSNG.DynaVehiParam' objects>

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, DynaVehiParam:Tessng.TESSNG.DynaVehiParam) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class FollowingModelParam(Shiboken.Object):
        alfa: getset_descriptor # value = <attribute 'alfa' of 'Tessng.TESSNG.FollowingModelParam' objects>
        beit: getset_descriptor # value = <attribute 'beit' of 'Tessng.TESSNG.FollowingModelParam' objects>
        safeDistance: getset_descriptor # value = <attribute 'safeDistance' of 'Tessng.TESSNG.FollowingModelParam' objects>
        safeInterval: getset_descriptor # value = <attribute 'safeInterval' of 'Tessng.TESSNG.FollowingModelParam' objects>
        vtype: getset_descriptor # value = <attribute 'vtype' of 'Tessng.TESSNG.FollowingModelParam' objects>

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, FollowingModelParam:Tessng.TESSNG.FollowingModelParam) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class MotorOrNonmotor(object):
        Motor: Tessng.TESSNG.MotorOrNonmotor # value = Tessng.TESSNG.MotorOrNonmotor.Motor
        Nonmotor: Tessng.TESSNG.MotorOrNonmotor # value = Tessng.TESSNG.MotorOrNonmotor.Nonmotor
        name: getset_descriptor # value = <attribute 'name' of 'Tessng.TESSNG.MotorOrNonmotor' objects>
        values: dict # value = {'Motor': Tessng.TESSNG.MotorOrNonmotor.Motor, 'Nonmotor': Tessng.TESSNG.MotorOrNonmotor.Nonmotor}
        Motor                    : TESSNG.MotorOrNonmotor = ... # 0x0
        Nonmotor                 : TESSNG.MotorOrNonmotor = ... # 0x1

    class RoutingFlowRatio(Shiboken.Object):
        ratio: getset_descriptor # value = <attribute 'ratio' of 'Tessng.TESSNG.RoutingFlowRatio' objects>
        routingID: getset_descriptor # value = <attribute 'routingID' of 'Tessng.TESSNG.RoutingFlowRatio' objects>

        @typing.overload
        def __init__(self, RoutingFlowRatio:Tessng.TESSNG.RoutingFlowRatio) -> None: ...
        @typing.overload
        def __init__(self, id:int, r:float) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class SignalContralParam(Shiboken.Object):
        crdinatedPhaseDiff: getset_descriptor # value = <attribute 'crdinatedPhaseDiff' of 'Tessng.TESSNG.SignalContralParam' objects>
        crdinatedPhaseNum: getset_descriptor # value = <attribute 'crdinatedPhaseNum' of 'Tessng.TESSNG.SignalContralParam' objects>
        fromTime: getset_descriptor # value = <attribute 'fromTime' of 'Tessng.TESSNG.SignalContralParam' objects>
        mlPhaseGreen: getset_descriptor # value = <attribute 'mlPhaseGreen' of 'Tessng.TESSNG.SignalContralParam' objects>
        period: getset_descriptor # value = <attribute 'period' of 'Tessng.TESSNG.SignalContralParam' objects>
        redInterval: getset_descriptor # value = <attribute 'redInterval' of 'Tessng.TESSNG.SignalContralParam' objects>
        signalGroupId: getset_descriptor # value = <attribute 'signalGroupId' of 'Tessng.TESSNG.SignalContralParam' objects>
        toTime: getset_descriptor # value = <attribute 'toTime' of 'Tessng.TESSNG.SignalContralParam' objects>
        yellowInterval: getset_descriptor # value = <attribute 'yellowInterval' of 'Tessng.TESSNG.SignalContralParam' objects>

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, SignalContralParam:Tessng.TESSNG.SignalContralParam) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class SignalPhaseColor(Shiboken.Object):
        color: getset_descriptor # value = <attribute 'color' of 'Tessng.TESSNG.SignalPhaseColor' objects>
        mrIntervalByNow: getset_descriptor # value = <attribute 'mrIntervalByNow' of 'Tessng.TESSNG.SignalPhaseColor' objects>
        mrIntervalSetted: getset_descriptor # value = <attribute 'mrIntervalSetted' of 'Tessng.TESSNG.SignalPhaseColor' objects>
        phaseNumber: getset_descriptor # value = <attribute 'phaseNumber' of 'Tessng.TESSNG.SignalPhaseColor' objects>
        signalGroupId: getset_descriptor # value = <attribute 'signalGroupId' of 'Tessng.TESSNG.SignalPhaseColor' objects>

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, SignalPhaseColor:Tessng.TESSNG.SignalPhaseColor) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class VehiInfoAggregated(Shiboken.Object):
        avgSpeed: getset_descriptor # value = <attribute 'avgSpeed' of 'Tessng.TESSNG.VehiInfoAggregated' objects>
        collectorId: getset_descriptor # value = <attribute 'collectorId' of 'Tessng.TESSNG.VehiInfoAggregated' objects>
        fromTime: getset_descriptor # value = <attribute 'fromTime' of 'Tessng.TESSNG.VehiInfoAggregated' objects>
        occupancy: getset_descriptor # value = <attribute 'occupancy' of 'Tessng.TESSNG.VehiInfoAggregated' objects>
        timeId: getset_descriptor # value = <attribute 'timeId' of 'Tessng.TESSNG.VehiInfoAggregated' objects>
        toTime: getset_descriptor # value = <attribute 'toTime' of 'Tessng.TESSNG.VehiInfoAggregated' objects>
        vehiCount: getset_descriptor # value = <attribute 'vehiCount' of 'Tessng.TESSNG.VehiInfoAggregated' objects>

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, VehiInfoAggregated:Tessng.TESSNG.VehiInfoAggregated) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class VehiInfoCollected(Shiboken.Object):
        acce: getset_descriptor # value = <attribute 'acce' of 'Tessng.TESSNG.VehiInfoCollected' objects>
        avgSpeed: getset_descriptor # value = <attribute 'avgSpeed' of 'Tessng.TESSNG.VehiInfoCollected' objects>
        collectorId: getset_descriptor # value = <attribute 'collectorId' of 'Tessng.TESSNG.VehiInfoCollected' objects>
        desirSpeed: getset_descriptor # value = <attribute 'desirSpeed' of 'Tessng.TESSNG.VehiInfoCollected' objects>
        distFront: getset_descriptor # value = <attribute 'distFront' of 'Tessng.TESSNG.VehiInfoCollected' objects>
        drivInterval: getset_descriptor # value = <attribute 'drivInterval' of 'Tessng.TESSNG.VehiInfoCollected' objects>
        intervalFront: getset_descriptor # value = <attribute 'intervalFront' of 'Tessng.TESSNG.VehiInfoCollected' objects>
        length: getset_descriptor # value = <attribute 'length' of 'Tessng.TESSNG.VehiInfoCollected' objects>
        simuInterval: getset_descriptor # value = <attribute 'simuInterval' of 'Tessng.TESSNG.VehiInfoCollected' objects>
        vehiId: getset_descriptor # value = <attribute 'vehiId' of 'Tessng.TESSNG.VehiInfoCollected' objects>
        vehiType: getset_descriptor # value = <attribute 'vehiType' of 'Tessng.TESSNG.VehiInfoCollected' objects>

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, VehiInfoCollected:Tessng.TESSNG.VehiInfoCollected) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class VehiQueueAggregated(Shiboken.Object):
        avgQueueLength: getset_descriptor # value = <attribute 'avgQueueLength' of 'Tessng.TESSNG.VehiQueueAggregated' objects>
        avgVehiCount: getset_descriptor # value = <attribute 'avgVehiCount' of 'Tessng.TESSNG.VehiQueueAggregated' objects>
        counterId: getset_descriptor # value = <attribute 'counterId' of 'Tessng.TESSNG.VehiQueueAggregated' objects>
        fromTime: getset_descriptor # value = <attribute 'fromTime' of 'Tessng.TESSNG.VehiQueueAggregated' objects>
        maxQueueLength: getset_descriptor # value = <attribute 'maxQueueLength' of 'Tessng.TESSNG.VehiQueueAggregated' objects>
        minQueueLength: getset_descriptor # value = <attribute 'minQueueLength' of 'Tessng.TESSNG.VehiQueueAggregated' objects>
        timeId: getset_descriptor # value = <attribute 'timeId' of 'Tessng.TESSNG.VehiQueueAggregated' objects>
        toTime: getset_descriptor # value = <attribute 'toTime' of 'Tessng.TESSNG.VehiQueueAggregated' objects>

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, VehiQueueAggregated:Tessng.TESSNG.VehiQueueAggregated) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class VehiQueueCounted(Shiboken.Object):
        counterId: getset_descriptor # value = <attribute 'counterId' of 'Tessng.TESSNG.VehiQueueCounted' objects>
        fromTime: getset_descriptor # value = <attribute 'fromTime' of 'Tessng.TESSNG.VehiQueueCounted' objects>
        queueLength: getset_descriptor # value = <attribute 'queueLength' of 'Tessng.TESSNG.VehiQueueCounted' objects>
        simuTime: getset_descriptor # value = <attribute 'simuTime' of 'Tessng.TESSNG.VehiQueueCounted' objects>
        timeId: getset_descriptor # value = <attribute 'timeId' of 'Tessng.TESSNG.VehiQueueCounted' objects>
        toTime: getset_descriptor # value = <attribute 'toTime' of 'Tessng.TESSNG.VehiQueueCounted' objects>
        vehiCount: getset_descriptor # value = <attribute 'vehiCount' of 'Tessng.TESSNG.VehiQueueCounted' objects>

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, VehiQueueCounted:Tessng.TESSNG.VehiQueueCounted) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class VehiTravelAggregated(Shiboken.Object):
        avgDelay: getset_descriptor # value = <attribute 'avgDelay' of 'Tessng.TESSNG.VehiTravelAggregated' objects>
        avgTravelDistance: getset_descriptor # value = <attribute 'avgTravelDistance' of 'Tessng.TESSNG.VehiTravelAggregated' objects>
        avgTravelTime: getset_descriptor # value = <attribute 'avgTravelTime' of 'Tessng.TESSNG.VehiTravelAggregated' objects>
        detectedId: getset_descriptor # value = <attribute 'detectedId' of 'Tessng.TESSNG.VehiTravelAggregated' objects>
        fromTime: getset_descriptor # value = <attribute 'fromTime' of 'Tessng.TESSNG.VehiTravelAggregated' objects>
        timeId: getset_descriptor # value = <attribute 'timeId' of 'Tessng.TESSNG.VehiTravelAggregated' objects>
        toTime: getset_descriptor # value = <attribute 'toTime' of 'Tessng.TESSNG.VehiTravelAggregated' objects>
        vehiCount: getset_descriptor # value = <attribute 'vehiCount' of 'Tessng.TESSNG.VehiTravelAggregated' objects>

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, VehiTravelAggregated:Tessng.TESSNG.VehiTravelAggregated) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class VehiTravelDetected(Shiboken.Object):
        delay: getset_descriptor # value = <attribute 'delay' of 'Tessng.TESSNG.VehiTravelDetected' objects>
        desireSpeed: getset_descriptor # value = <attribute 'desireSpeed' of 'Tessng.TESSNG.VehiTravelDetected' objects>
        detectedId: getset_descriptor # value = <attribute 'detectedId' of 'Tessng.TESSNG.VehiTravelDetected' objects>
        fromTime: getset_descriptor # value = <attribute 'fromTime' of 'Tessng.TESSNG.VehiTravelDetected' objects>
        toTime: getset_descriptor # value = <attribute 'toTime' of 'Tessng.TESSNG.VehiTravelDetected' objects>
        travelDistance: getset_descriptor # value = <attribute 'travelDistance' of 'Tessng.TESSNG.VehiTravelDetected' objects>
        travelTime: getset_descriptor # value = <attribute 'travelTime' of 'Tessng.TESSNG.VehiTravelDetected' objects>
        vehiId: getset_descriptor # value = <attribute 'vehiId' of 'Tessng.TESSNG.VehiTravelDetected' objects>

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, VehiTravelDetected:Tessng.TESSNG.VehiTravelDetected) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class VehicleComposition(Shiboken.Object):
        proportion: getset_descriptor # value = <attribute 'proportion' of 'Tessng.TESSNG.VehicleComposition' objects>
        vehiTypeCode: getset_descriptor # value = <attribute 'vehiTypeCode' of 'Tessng.TESSNG.VehicleComposition' objects>

        @typing.overload
        def __init__(self, VehicleComposition:Tessng.TESSNG.VehicleComposition) -> None: ...
        @typing.overload
        def __init__(self, c:int, p:float) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class VehiclePosition(Shiboken.Object):
        mEuler: getset_descriptor # value = <attribute 'mEuler' of 'Tessng.TESSNG.VehiclePosition' objects>
        mPoint: getset_descriptor # value = <attribute 'mPoint' of 'Tessng.TESSNG.VehiclePosition' objects>
        mrAngle: getset_descriptor # value = <attribute 'mrAngle' of 'Tessng.TESSNG.VehiclePosition' objects>
        mrBatchNumber: getset_descriptor # value = <attribute 'mrBatchNumber' of 'Tessng.TESSNG.VehiclePosition' objects>
        mrDatetime: getset_descriptor # value = <attribute 'mrDatetime' of 'Tessng.TESSNG.VehiclePosition' objects>
        vehiId: getset_descriptor # value = <attribute 'vehiId' of 'Tessng.TESSNG.VehiclePosition' objects>

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, VehiclePosition:Tessng.TESSNG.VehiclePosition) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class VehicleStatus(Shiboken.Object):
        mColor: getset_descriptor # value = <attribute 'mColor' of 'Tessng.TESSNG.VehicleStatus' objects>
        mEuler: getset_descriptor # value = <attribute 'mEuler' of 'Tessng.TESSNG.VehicleStatus' objects>
        mPoint: getset_descriptor # value = <attribute 'mPoint' of 'Tessng.TESSNG.VehicleStatus' objects>
        mrAcce: getset_descriptor # value = <attribute 'mrAcce' of 'Tessng.TESSNG.VehicleStatus' objects>
        mrAngle: getset_descriptor # value = <attribute 'mrAngle' of 'Tessng.TESSNG.VehicleStatus' objects>
        mrBatchNumber: getset_descriptor # value = <attribute 'mrBatchNumber' of 'Tessng.TESSNG.VehicleStatus' objects>
        mrDatetime: getset_descriptor # value = <attribute 'mrDatetime' of 'Tessng.TESSNG.VehicleStatus' objects>
        mrDrivDistance: getset_descriptor # value = <attribute 'mrDrivDistance' of 'Tessng.TESSNG.VehicleStatus' objects>
        mrLength: getset_descriptor # value = <attribute 'mrLength' of 'Tessng.TESSNG.VehicleStatus' objects>
        mrRoadId: getset_descriptor # value = <attribute 'mrRoadId' of 'Tessng.TESSNG.VehicleStatus' objects>
        mrSpeed: getset_descriptor # value = <attribute 'mrSpeed' of 'Tessng.TESSNG.VehicleStatus' objects>
        mrWidth: getset_descriptor # value = <attribute 'mrWidth' of 'Tessng.TESSNG.VehicleStatus' objects>
        roadType: getset_descriptor # value = <attribute 'roadType' of 'Tessng.TESSNG.VehicleStatus' objects>
        startLinkId: getset_descriptor # value = <attribute 'startLinkId' of 'Tessng.TESSNG.VehicleStatus' objects>
        startSimuTime: getset_descriptor # value = <attribute 'startSimuTime' of 'Tessng.TESSNG.VehicleStatus' objects>
        vehiId: getset_descriptor # value = <attribute 'vehiId' of 'Tessng.TESSNG.VehicleStatus' objects>
        vehiType: getset_descriptor # value = <attribute 'vehiType' of 'Tessng.TESSNG.VehicleStatus' objects>
        pass

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, VehicleStatus:Tessng.TESSNG.VehicleStatus) -> None: ...

        @staticmethod
        def __copy__() -> None: ...


class TessInterface(PySide2.QtCore.QObject):
    staticMetaObject: PySide2.QtCore.QMetaObject

    def __init__(self) -> None: ...

    def guiInterface(self) -> Tessng.GuiInterface: ...
    def loadPluginFromMem(self, pPlugin:Tessng.TessPlugin) -> bool: ...
    def netInterface(self) -> Tessng.NetInterface: ...
    def releasePlugins(self) -> None: ...
    def simuInterface(self) -> Tessng.SimuInterface: ...


class TessInterfaces(Shiboken.Object):

    def __init__(self) -> None: ...


class TessPlugin(Shiboken.Object):

    def __init__(self, name:str=..., description:str=..., category:str=..., version:str=..., uuid:str=..., valicode:str=...) -> None: ...

    def callMethod(self, methodName:str, params:typing.Sequence) -> None: ...
    def category(self) -> str: ...
    @typing.overload
    def certificate(self, account:str, code:int) -> bool: ...
    @typing.overload
    def certificate(self, account:str, code:int, grade:int, netFilePath:str) -> bool: ...
    def customerGui(self) -> Tessng.CustomerGui: ...
    def customerNet(self) -> Tessng.CustomerNet: ...
    def customerSimulator(self) -> Tessng.CustomerSimulator: ...
    def description(self) -> str: ...
    def enableActions(self) -> None: ...
    def init(self) -> None: ...
    def isChecked(self) -> bool: ...
    def library(self) -> str: ...
    def name(self) -> str: ...
    def pluginFileBaseName(self) -> str: ...
    def pluginFileName(self) -> str: ...
    def pluginFileSuffix(self) -> str: ...
    def projName(self) -> str: ...
    def setLibrary(self, lib:str) -> None: ...
    def setTessngConfig(self, obj:typing.Dict) -> None: ...
    def setTessngDir(self, dir:str) -> None: ...
    def tessngConfig(self) -> typing.Dict: ...
    def tessngDir(self) -> str: ...
    def unEnableActions(self) -> None: ...
    def unload(self) -> None: ...
    def uuid(self) -> str: ...
    def valiCode(self) -> str: ...
    def version(self) -> str: ...
    def workspace(self) -> str: ...


class TessngFactory(Shiboken.Object):

    def __init__(self) -> None: ...

    def activeSoftware(self, certDir:str) -> bool: ...
    def build(self, pPlugin:Tessng.TessPlugin, jsonConfig:typing.Dict=...) -> PySide2.QtWidgets.QMainWindow: ...


class UnitOfMeasure(object):
    Metric: Tessng.UnitOfMeasure # value = Tessng.UnitOfMeasure.Metric
    Pixel: Tessng.UnitOfMeasure # value = Tessng.UnitOfMeasure.Pixel
    name: getset_descriptor # value = <attribute 'name' of 'Tessng.UnitOfMeasure' objects>
    values: dict # value = {'Pixel': Tessng.UnitOfMeasure.Pixel, 'Metric': Tessng.UnitOfMeasure.Metric}
    Pixel                    : UnitOfMeasure = ... # 0x0
    Metric                   : UnitOfMeasure = ... # 0x1


class objbool(Shiboken.Object):
    value: getset_descriptor # value = <attribute 'value' of 'Tessng.objbool' objects>

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, v:bool) -> None: ...


class objint(Shiboken.Object):
    value: getset_descriptor # value = <attribute 'value' of 'Tessng.objint' objects>

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, v:int) -> None: ...


class objint64(Shiboken.Object):
    value: getset_descriptor # value = <attribute 'value' of 'Tessng.objint64' objects>

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, v:int) -> None: ...


class objlong(Shiboken.Object):
    value: getset_descriptor # value = <attribute 'value' of 'Tessng.objlong' objects>

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, v:int) -> None: ...


class objreal(Shiboken.Object):
    value: getset_descriptor # value = <attribute 'value' of 'Tessng.objreal' objects>

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, v:float) -> None: ...


class objstring(Shiboken.Object):
    value: getset_descriptor # value = <attribute 'value' of 'Tessng.objstring' objects>
    pass

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, v:str) -> None: ...

@staticmethod
def m2p(value:float) -> float: ...
@staticmethod
def p2m(value:float) -> float: ...
@staticmethod
def setUnitOfMeasure(unit:Tessng.UnitOfMeasure) -> None: ...
@staticmethod
def tngIFace() -> Tessng.TessInterface: ...
@staticmethod
def tngPlugin() -> Tessng.TessPlugin: ...

# eof
